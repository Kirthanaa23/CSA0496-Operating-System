#include &lt;stdio.h&gt;
#include&lt;pthread.h&gt;
#include&lt;semaphore.h&gt;
#include&lt;Windows.h&gt;
#define BUFFER_SIZE 5
#define MAX_ITEMS 10
int buffer[BUFFER_SIZE];
sem_t empty, full;
int produced_items = 0, consumed_items = 0;
void* producer(void* arg) {
while (produced_items &lt; MAX_ITEMS) {
sem_wait(&amp;empty);
for (int i = 0; i &lt; BUFFER_SIZE; ++i) {if

(buffer[i] == 0) {
buffer[i] = produced_items + 1;
printf(&quot;Produced: %d\n&quot;, buffer[i]);
produced_items++;
break;
}
}
sem_post(&amp;full);
Sleep(1);
}
return NULL;
}
void* consumer(void* arg) {
while (consumed_items &lt; MAX_ITEMS) {
sem_wait(&amp;full);
for (int i = 0; i &lt; BUFFER_SIZE; ++i) {
if (buffer[i] != 0) {
printf(&quot;Consumed: %d\n&quot;, buffer[i]);
buffer[i] = 0;
consumed_items++;
break;
}

}
sem_post(&amp;empty);
Sleep(2);
}
return NULL;
}
int main() {
pthread_t producer_thread, consumer_thread;
sem_init(&amp;empty, 0, BUFFER_SIZE);
sem_init(&amp;full, 0, 0);
pthread_create(&amp;producer_thread,
NULL, producer, NULL);
pthread_create(&amp;consumer_thread, NULL,consumer, NULL);
pthread_join(producer_thread, NULL);
pthread_join(consumer_thread, NULL);
sem_destroy(&amp;empty);
sem_destroy(&amp;full);
return 0;
}
